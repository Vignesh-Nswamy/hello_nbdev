# AUTOGENERATED! DO NOT EDIT! File to edit: 05_ranker.ipynb (unless otherwise specified).

__all__ = ['invert_graph', 'rank_pages']

# Cell
#export
from collections import defaultdict

# Cell
#export
def invert_graph(graph):
    """
    Inverts a web graph \n
    {parent: [children]} -> {child: [parents]} \n
    Returns the inverted graph
    """
    inv_graph = defaultdict(list)
    for parent, children in graph.items():
        for child in children:
            inv_graph[child].append(parent)

    return inv_graph

# Cell
#export
def rank_pages(graph,
               max_iter=500,
               alpha=0.15):
    """
    Given a web graph, computes page rank for all webpages.
    Returns a dictionary with url as key and pagerank as value
    """
    N = len(graph)
    inv_graph = invert_graph(graph)
    rank = {k:float(1/N) for (k,v) in graph.items()}
    prev_rank = {k:float(1/N) for (k,v) in graph.items()}
    get_rank = lambda w_sum: ((1-alpha) * w_sum) + alpha/N
    terminate = False
    iter_cnt = 0
    while not terminate and iter_cnt < max_iter:
        for child, parents in inv_graph.items():
            rank[child] = get_rank(sum([prev_rank[parent]/len(graph[parent]) for parent in parents]))
        terminate = rank == prev_rank
        for k, v in rank.items():
            prev_rank[k] = v
        iter_cnt += 1
    return prev_rank